<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KingLion</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kinglion580.github.io/"/>
  <updated>2018-01-08T18:09:36.651Z</updated>
  <id>http://kinglion580.github.io/</id>
  
  <author>
    <name>KingLion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://kinglion580.github.io/2018/01/09/find_and_pack/"/>
    <id>http://kinglion580.github.io/2018/01/09/find_and_pack/</id>
    <published>2018-01-08T18:09:36.651Z</published>
    <updated>2018-01-08T18:09:36.651Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="questions">questions</span></h1><h2><span id="find-and-package-the-specified-files">Find and package the specified files</span></h2><h3><span id="introduce">introduce</span></h3><p>The challenges you need to find the <code>/etc</code> directory to meet the needs of the file, then, package and compress the file into a <code>tar.gz</code> package.</p><p>First, create a folder <code>/home/shiyanlou/backup</code>, and all the files that need to be packaged will be copied to this directory.</p><p>Then, copy all the files larger than 12K to the <code>/home/shiyanlou/backup</code> directory in the /etc directory of the lab building, and we need to keep the directory structure. For example, the <code>/etc/apt/trusted.gpg</code> file is 14K, and it will be copied to the <code>/home/shiyanlou/backup/etc/apt/trusted.gpg</code> path position. Notice that there are many files in the subfolder under the <code>/etc</code> directory that are more than 12K and need to be copied.</p><p>After the copy is completed, the <code>/home/shiyanlou/backup</code> is packaged and compressed, and the generated packet <code>backup.tar.gz</code> is placed under the <code>/tmp/backup.tar.gz</code> path.</p><p>Click to submit the result after the completion of the above task.</p><h3><span id="target">target</span></h3><ol><li>The compressed packet backup.tar.gz is placed under the <code>/tmp/backup.tar.gz</code> path</li><li>The compressed package backup.tar.gz contains all the files larger than 12K under the <code>/etc</code> directory, regardless of whether the shiyanlou user has access to the file or not.</li></ol><p>Please do not use soft links, such as the need to complete the copy of the file past.</p><h3><span id="hint">Hint</span></h3><ul><li>find, copy, pack, compress</li></ul><h3><span id="knowledge-point">Knowledge point</span></h3><ul><li>Linux file and directory operation</li><li>Linux file lookup operation</li><li>Tar command package</li><li>Gzip command compression</li></ul><h1><span id="keypoint">keypoint</span></h1><h2><span id="the-find-command-looks-up-some-files-and-copies-them-to-the-specified-directory">The find command looks up some files and copies them to the specified directory</span></h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo find /etc -size +12k -<span class="built_in">exec</span> cp --parents &#123;&#125; backup \;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><ul><li><code>exec</code></li><li><code>cp --parents</code></li></ul></blockquote><h1><span id="references">references</span></h1><ul><li><a href="http://blog.csdn.net/longintchar/article/details/51493562" target="_blank" rel="noopener">find,cp,exec-sample</a></li><li><a href="https://www.kafan.cn/edu/6999644.html" target="_blank" rel="noopener">find,cp,exec-detail</a></li><li><a href="http://blog.csdn.net/wgembed/article/details/39668645" target="_blank" rel="noopener">Preserving directory structure application instances when CP copies</a></li></ul><h1><span id="tools">tools</span></h1><ul><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">linux command search</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;questions&quot;&gt;questions&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;find-and-package-the-specified-files&quot;&gt;Find and package the specified files&lt;/span
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kinglion580.github.io/2018/01/09/monitor_mysql/"/>
    <id>http://kinglion580.github.io/2018/01/09/monitor_mysql/</id>
    <published>2018-01-08T18:09:36.651Z</published>
    <updated>2018-01-08T18:09:36.651Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="question">question</span></h1><h2><span id="monitor-service-with-bash">monitor service with bash</span></h2><h3><span id="introduce">introduce</span></h3><p>On the server, our services may be hung up for a variety of reasons, such as mongodb Out of memory, and the system is kill, resulting in the service can not work properly. So we need a simple monitoring script <code>check_service.sh</code> to view the status of our service in real time. If the service state is stopped, we can try to restart the service automatically.</p><p>The script can accept a parameter, which is the name of the service. The name of the service can use the service command to view, start and stop the state. For example, check the status of the MySQL service.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$bash /home/shiyanlou/check_service.sh mysql</span><br><span class="line">Is Running</span><br></pre></td></tr></table></figure></p><p>If the MySQL service is not running, the MySQL service is started and the following output information is printed:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$bash /home/shiyanlou/check_service.sh mysql</span><br><span class="line">Restarting</span><br></pre></td></tr></table></figure></p><p>If the service does not exist, the error information is output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$bash /home/shiyanlou/check_service.sh notfoundservice</span><br><span class="line">Error: Service Not Found</span><br></pre></td></tr></table></figure></p><h3><span id="target">target</span></h3><ol><li>The script is named <code>check_serive.sh</code>, and the path must be <code>/home/shiyanlou/check_service.sh</code></li></ol><ol><li>The script can <code>accept a parameter</code>, the parameter is the name of the service, and the check_service.sh service name can be called in this way</li></ol><ol><li>If the service is running “is Running”, if the service is stopped, the service is started, and if the service does not exist, output error information</li></ol><ol><li><code>/home/shiyanlou/check_service.sh mysql</code> is put into crontab once a day, which can ensure that MySQL service can be restarted when it is hung up, and we need to manually start cron service.</li></ol><h3><span id="hint">Hint</span></h3><ol><li>You can use <code>sudo service xxx start/status/stop</code> for service management</li><li>Use of command line position parameters</li><li>Service status information use can be judged by grep</li></ol><h3><span id="knowledge-point">Knowledge point</span></h3><ul><li>Bash process control</li><li>The control of service and process</li><li>Crontab</li></ul><h3><span id="keypoint">keypoint</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ `ps -ef|grep -v grep|grep <span class="variable">$1</span>|wc -l` -gt 3 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"is Running"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    sudo service <span class="variable">$1</span> start</span><br><span class="line">    <span class="keyword">if</span> [ `ps -ef|grep -v grep|grep <span class="variable">$1</span>|wc -l` -gt 2 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Restarting"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Error:Service Not Found"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ `netstat -at|grep <span class="variable">$1</span>|wc -l` -gt 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"is Running"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    sudo service <span class="variable">$1</span> start</span><br><span class="line">    <span class="keyword">if</span> [ `netstat -at|grep <span class="variable">$1</span>|wc -l` -gt 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Restarting"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Error:Service Not Found"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4><span id="view-the-process">view the process</span></h4><blockquote><ul><li><code>ps -ef</code></li><li><code>grep -v</code> exclude the grep process</li><li><code>wc -l</code> count row num</li><li><code>netstat -at|grep mysql</code></li><li><code>pstree</code> show the derived relation between the proceses in a tree diagram way</li></ul></blockquote><h4><span id="start-crontab">start crontab</span></h4><blockquote><p><code>sudo service rsyslog start</code></p><p><code>sudo cron -f &amp;</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;question&quot;&gt;question&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;monitor-service-with-bash&quot;&gt;monitor service with bash&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;span id=&quot;intr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kinglion580.github.io/2018/01/09/sed_markdown/"/>
    <id>http://kinglion580.github.io/2018/01/09/sed_markdown/</id>
    <published>2018-01-08T18:09:36.651Z</published>
    <updated>2018-01-08T18:09:36.651Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="question">question</span></h1><h2><span id="optimize-markdown-documents-with-sed">optimize markdown documents with sed</span></h2><h3><span id="introduce">introduce</span></h3><p>You are the document inspector of the shiyanlou, need to check document format every day, a document found in different marks appear blank between too much (provisions require only a blank document appeared in 2, 3 cases), and all the image formats are written into the link, need you use this document to quickly repair Sed.</p><p>For example, a document does not regulate instances and link errors:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## title one</span><br><span class="line"></span><br><span class="line">## Title Two</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Title Three</span><br><span class="line"></span><br><span class="line">[picture-1] (https://www.shiyanlou.com/test.png)</span><br></pre></td></tr></table></figure></p><p>Title Two and Title Three require only one empty line directly.</p><p>you should execute the Sed script in this way:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sed -f /home/shiyanlou/fix-format.sed document</span><br></pre></td></tr></table></figure></p><p>After execution, the document is turned into:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## title one</span><br><span class="line"></span><br><span class="line">## Title Two</span><br><span class="line"></span><br><span class="line">## Title Three</span><br><span class="line"></span><br><span class="line">[picture-1] (https://www.shiyanlou.com/test.png)</span><br></pre></td></tr></table></figure></p><h3><span id="target">target</span></h3><ol><li>The script path must be placed in the <code>/home/shiyanlou/fix-format.sed</code></li><li>The way to call is: <code>sed -f /home/shiyanlou/fix-format.sed</code> document</li><li>Delete extra repeat blank lines in a document</li><li>revising the format of the picture link</li></ol><h3><span id="hint">Hint</span></h3><ol><li><p>sed matching empty lines</p></li><li><p>the hints of the picture link are all in [picture-xxx] format, and the suffix of the address is.Png or.Jpg</p></li><li><p>test document download link: <a href="http://labfile.oss.aliyuncs.com/courses/980/test-document.md" target="_blank" rel="noopener">http://labfile.oss.aliyuncs.com/courses/980/test-document.md</a></p></li></ol><h3><span id="knowledge-point">Knowledge point</span></h3><ul><li>regular expression</li><li>Sed</li></ul><h1><span id="keypoint">keypoint</span></h1><ul><li><p><strong>delete rows retain only one line</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^$/&#123;</span><br><span class="line">  N</span><br><span class="line">  /^\n$/D</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>replace</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s/\[picture/\!\[picture/</span><br></pre></td></tr></table></figure></li></ul><p><em>Note that the escape character</em></p><h1><span id="references">references</span></h1><ul><li><a href="https://github.com/kinglion580/syl_linux/blob/master/knowlege/sed.md" target="_blank" rel="noopener">my-knowledge-sed</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;question&quot;&gt;question&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;optimize-markdown-documents-with-sed&quot;&gt;optimize markdown documents with sed&lt;/span&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://kinglion580.github.io/2018/01/09/stdout_stderr/"/>
    <id>http://kinglion580.github.io/2018/01/09/stdout_stderr/</id>
    <published>2018-01-08T18:09:36.651Z</published>
    <updated>2018-01-08T18:09:36.651Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="determine-if-output-is-stdout-or-stderr">determine if output is stdout or stderr</span></h1><h2><span id="solution">solution</span></h2><ul><li><strong>redireciton</strong><blockquote><ul><li>standard input: <code>0</code></li><li>standard output: <code>1</code></li><li>standard error: <code>2</code></li></ul></blockquote></li></ul><ul><li><strong>print STDERR in red</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash func 2&gt; &gt;(<span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="built_in">echo</span> -e <span class="string">"\e[01;31m<span class="variable">$line</span>\e[0m"</span> &gt;&amp;2;<span class="keyword">done</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://dn-simplecloud.shiyanlou.com/5962221513739678076-wm" alt="实验楼" title="">                </div>                <div class="image-caption">实验楼</div>            </figure><h2><span id="references">references</span></h2><ul><li><a href="https://superuser.com/questions/453598/determine-if-output-is-stdout-or-stderr" target="_blank" rel="noopener">determine if output is stdout or stderr</a></li><li><a href="https://serverfault.com/questions/59262/bash-print-stderr-in-red-color#" target="_blank" rel="noopener">bash:print stderr in red color</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;determine-if-output-is-stdout-or-stderr&quot;&gt;determine if output is stdout or stderr&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;solution&quot;&gt;solution&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kinglion580.github.io/2018/01/09/hello-world/"/>
    <id>http://kinglion580.github.io/2018/01/09/hello-world/</id>
    <published>2018-01-08T16:16:40.399Z</published>
    <updated>2018-01-08T16:16:40.399Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>crontab</title>
    <link href="http://kinglion580.github.io/2017/12/12/crontab/"/>
    <id>http://kinglion580.github.io/2017/12/12/crontab/</id>
    <published>2017-12-11T16:00:00.000Z</published>
    <updated>2018-01-08T18:45:52.216Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="question">question</span></h2><h2><span id="periodically-pack-a-backup-log">Periodically pack a backup log</span></h2><h3><span id="introduce">introduce</span></h3><p>You are the server administrator of the experiment building, and you need to back up the log files in the <code>/var/log</code> directory every day. After the backup is packed and compressed for a long time, the file name is stored in the format of the <code>year-month-day.Tar.gz</code>. For example, the file backed up in November 1, 2017 is 2017-11-01.tar.gz, and the files after the backup are stored in the <code>/home/shiyanlou/backup</code> directory.</p><p>Note that you need to use the method of incremental backup of the tar command to make a backup.</p><h3><span id="target">target</span></h3><ol><li>Add planning tasks for shiyanlou users</li></ol><ol><li><code>Every day at 3 a.m</code>., back up the <code>/var/log</code> directory to the <code>/home/shiyanlou/backup/year-month-day.Tar.gz</code> file, and note that it is an incremental backup.</li></ol><ol><li>Backup file naming format is <code>year-month-day.Tar.gz</code></li></ol><ol><li>Write to crontab with a command, do not write the script<h3><span id="hint">Hint</span></h3></li></ol><p>Crontab sets a tar command for an incremental backup of the specified time.</p><h3><span id="knowledge-point">Knowledge point</span></h3><p>Date formatted output string<br>Crontab set planning tasks<br>Tar command incremental backup mode</p><h2><span id="keypoint">keypoint</span></h2><blockquote><p>0 3 <em> </em> * tar -cvf /home/shiyanlou/backup/$(date +\%Y-\%m-\%d).tar.gz -g /var/log</p><ul><li><code>tar.gz</code></li><li><code>0 3</code></li><li><code>\%Y\%m\%d\%H\%M\%S</code></li></ul></blockquote><ul><li><h2><span id="how-to-start-cron">how to start cron</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service rsyslog start</span><br><span class="line">sudo cron -f &amp;</span><br></pre></td></tr></table></figure></li><li><h2><span id="check-whether-cron-is-started">check whether cron is started</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux|grep cron</span><br><span class="line">or</span><br><span class="line">pgrep cron</span><br></pre></td></tr></table></figure></li><li><h2><span id="edit">edit</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></li><li><h2><span id="list">list</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure></li><li><h2><span id="remove">remove</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;question&quot;&gt;question&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span id=&quot;periodically-pack-a-backup-log&quot;&gt;Periodically pack a backup log&lt;/span&gt;&lt;/h2&gt;&lt;h3&gt;&lt;spa
      
    
    </summary>
    
      <category term="linux" scheme="http://kinglion580.github.io/categories/linux/"/>
    
      <category term="challenge" scheme="http://kinglion580.github.io/categories/linux/challenge/"/>
    
    
      <category term="linux" scheme="http://kinglion580.github.io/tags/linux/"/>
    
      <category term="cron" scheme="http://kinglion580.github.io/tags/cron/"/>
    
  </entry>
  
</feed>
